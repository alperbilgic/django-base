"""
Django settings for myapp project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import environ
from datetime import timedelta
from pathlib import Path

import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-gnwrb85!2bti+#oua3fspdj_(95u*u)4*j-80#o_z0%c)@=6le"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "django_filters",
    "drf_yasg",
    "authy",
    "user",
    "common",
    "contact_verification",
    "payment",
    "subscription",
    "vendor",
]

MIDDLEWARE = [
    "common.middlewares.health_check_middleware.HealthCheckMiddleware",
    "common.middlewares.global_context_middleware.GlobalContextMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "common.middlewares.swagger_middleware.SwaggerAccessMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = "manage.urls"
APPEND_SLASH = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "manage.wsgi.application"

ENV = environ.Env(DEBUG=(bool, False))
env_file = os.path.join(BASE_DIR, ".env")

if os.path.isfile(env_file):
    # override local env file by adding PWD line if doesn't exist
    with open(env_file, "r") as f:
        lines = f.readlines()
        try:
            pwd_line = list(
                filter(lambda line: line.replace(" ", "")[0:4] == "PWD=", lines)
            )
            if len(pwd_line) == 0:
                with open(env_file, "a") as f:
                    f.writelines(["\nPWD=" + str(BASE_DIR)])
        except Exception as e:
            pass
    # Use a local secret file, if provided
    ENV.read_env(env_file)

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {"default": dj_database_url.config()}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "authy.Account"

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

TIME_ZONE = "UTC"

LANGUAGE_CODE = "en-us"

USE_I18N = True
USE_L10N = True

LANGUAGES = [
    ("en", "English"),
    ("tr", "Turkish"),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated"),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "EXCEPTION_HANDLER": "common.exception_handling.custom_exception_handler.custom_exception_handler",
    "PAGE_SIZE": 100,
}

SWAGGER_SETTINGS = {
    "DOC_EXPANSION": "list",
    "APIS_SORTER": "alpha",
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    },
}

SWAGGER_ACCESS_PASSCODE = os.environ.get("SWAGGER_ACCESS_PASSCODE")

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "account_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

IDRIVE_ENDPOINT_URL = os.environ.get("IDRIVE_ENDPOINT_URL")
IDRIVE_ACCESS_KEY = os.environ.get("IDRIVE_ACCESS_KEY")
IDRIVE_SECRET_ACCESS_KEY = os.environ.get("IDRIVE_SECRET_ACCESS_KEY")
CLOUD_STORAGE_BUCKET_NAME = os.environ.get("CLOUD_STORAGE_BUCKET_NAME")
CLOUD_STORAGE_PUBLIC_BUCKET_NAME = os.environ.get("CLOUD_STORAGE_PUBLIC_BUCKET_NAME")
CLOUD_STORAGE_VENDOR = os.environ.get("CLOUD_STORAGE_VENDOR")
CLOUD_STORAGE_BUCKET_IS_PUBLIC = os.environ.get("CLOUD_STORAGE_BUCKET_IS_PUBLIC")
IDRIVE_BUCKET_NAME = os.environ.get("IDRIVE_BUCKET_NAME")
PUBLIC_FILE_EXPIRATION_TIMESTAMP = 32503680000

AVATAR_FILE_PATH = "avatars/{avatar_id}.{extension}"
TRANSLATED_FILE_DIRECTORY = "translated_file/"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_VERIFICATION_ACTIVE_INTERVAL = 1500  # a day
PHONE_VERIFICATION_ACTIVE_INTERVAL = 300  # 5 minutes

GOOGLE_PLAY_RSA_KEY = os.environ.get("GOOGLE_PLAY_RSA_KEY")
GOOGLE_PLAY_PACKAGE_NAME = os.environ.get("GOOGLE_PLAY_PACKAGE_NAME")
GOOGLE_PLAY_TYPE = os.environ.get("GOOGLE_PLAY_TYPE")
GOOGLE_PLAY_PROJECT_ID = os.environ.get("GOOGLE_PLAY_PROJECT_ID")
GOOGLE_PLAY_PRIVATE_KEY_ID = os.environ.get("GOOGLE_PLAY_PRIVATE_KEY_ID")
GOOGLE_PLAY_PRIVATE_KEY = os.environ.get("GOOGLE_PLAY_PRIVATE_KEY")
GOOGLE_PLAY_CLIENT_EMAIL = os.environ.get("GOOGLE_PLAY_CLIENT_EMAIL")
GOOGLE_PLAY_CLIENT_ID = os.environ.get("GOOGLE_PLAY_CLIENT_ID")
GOOGLE_PLAY_AUTH_URI = os.environ.get("GOOGLE_PLAY_AUTH_URI")
GOOGLE_PLAY_TOKEN_URI = os.environ.get("GOOGLE_PLAY_TOKEN_URI")
GOOGLE_PLAY_AUTH_PROVIDER_X509_CERT_URL = os.environ.get(
    "GOOGLE_PLAY_AUTH_PROVIDER_X509_CERT_URL"
)
GOOGLE_PLAY_CLIENT_X509_CERT_URL = os.environ.get("GOOGLE_PLAY_CLIENT_X509_CERT_URL")
GOOGLE_PLAY_UNIVERSE_DOMAIN = os.environ.get("GOOGLE_PLAY_UNIVERSE_DOMAIN")

APPLE_IN_APP_SIGNING_KEY = os.environ.get("APPLE_IN_APP_SIGNING_KEY")
APPLE_BUNDLE_ID = os.environ.get("APPLE_BUNDLE_ID")
APPLE_DEVELOPER_KEY_ID = os.environ.get("APPLE_DEVELOPER_KEY_ID")
APPLE_DEVELOPER_ISSUER_ID = os.environ.get("APPLE_DEVELOPER_ISSUER_ID")
APPLE_APP_ID = os.environ.get("APPLE_APP_ID")
APPLE_CONNECT_API_KEY_ID = os.environ.get("APPLE_CONNECT_API_KEY_ID")
APPLE_CONNECT_API_SIGNING_KEY = os.environ.get("APPLE_CONNECT_API_SIGNING_KEY")
AUTO_RETRY_WRONG_ENVIRONMENT_REQUEST = True

SMS_HEADER = os.environ.get("SMS_HEADER")
NETGSM_USER_CODE = os.environ.get("NETGSM_USER_CODE")
NETGSM_PASSWORD = os.environ.get("NETGSM_PASSWORD")
